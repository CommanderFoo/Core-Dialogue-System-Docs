{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dialogue System Documentation Welcome to the documentation for the Dialogue System found in Core Community Content. The Dialogue System will allow you to create conversations between characters and players with ease. It is beginner friendly, but also packs some powerful features for the more experienced creator. It comes with various examples of the features so you can get up and running quickly. Info In the demo video above, some advanced features like conditions and callbacks are being used to add more variety and depth to the characters. The demo comes with the system so you can try it yourself and see how things were done. This system was built with 3 main goals. Beginner Friendly I wanted beginners to be able to get a conversation with player choices up and runnng quickly. This system can be used without Lua knowledge, and doesn't require you to open up Lua Scripts to write your own conversation branches. Advanced Features Advanced features for those with Lua knowledge so they can immerse the player into a conversation. This means the same character can provide different conversation branches and choices for the player to explore based on player actions in game. This is a great way to add more depth to the characters. Customisation The system comes with a few different themes that can be swapped out in editor and runtime. The system allows for easy customisation of the dialogues and player choices so you can make the dialogues unique for your game.","title":"Home"},{"location":"#dialogue-system-documentation","text":"Welcome to the documentation for the Dialogue System found in Core Community Content. The Dialogue System will allow you to create conversations between characters and players with ease. It is beginner friendly, but also packs some powerful features for the more experienced creator. It comes with various examples of the features so you can get up and running quickly. Info In the demo video above, some advanced features like conditions and callbacks are being used to add more variety and depth to the characters. The demo comes with the system so you can try it yourself and see how things were done. This system was built with 3 main goals. Beginner Friendly I wanted beginners to be able to get a conversation with player choices up and runnng quickly. This system can be used without Lua knowledge, and doesn't require you to open up Lua Scripts to write your own conversation branches. Advanced Features Advanced features for those with Lua knowledge so they can immerse the player into a conversation. This means the same character can provide different conversation branches and choices for the player to explore based on player actions in game. This is a great way to add more depth to the characters. Customisation The system comes with a few different themes that can be swapped out in editor and runtime. The system allows for easy customisation of the dialogues and player choices so you can make the dialogues unique for your game.","title":"Dialogue System Documentation"},{"location":"callbacks/","text":"Callbacks Callbacks are for the more experienced creator because the return value can be based on many conditions depending on what you want to achieve. For example, you can use callbacks to determine if an NPC should display certain choices to the player. Maybe you have an NPC that sells special weapons, but you only want to list weapons that are for that players level. This is where callbacks become really useful and make the dialogues appear more dynamic. To use the callback system, you need to require the Dialogue_System into your script by dropping it on as a custom property. 1 local Dialogue_System = require(script:GetCustomProperty(\"Dialogue_System\")) The next part is to hook up your callback so the system knows about it. It's important to make sure that the callback name matches the value in the condition of the conversation entry / choice. So for example if the player choice condition for an item an NPC sells would be function=can_show_epic_sword . 1 2 3 4 5 6 7 Dialogue_System . register_callback ( \"can_show_epic_sword\" , function () if ( local_player : GetResource ( \"level\" ) >= 10 ) then return true end return false end ) In the example above, we return true if the players level is greater than or equal to 10, if it is, then the NPC will display the player choice allowing them to purchase the Epic Sword. If for some reason you need to remove a callback, then you can unregister it like so... 1 Dialogue_System . unregister_callback ( \"can_show_epic_sword\" ) Tip Take a look at the NPC Nya in the Advanced Example to show you how it can be used to display a different dialogue entry every time the player comes back to speak to them.","title":"Callbacks"},{"location":"callbacks/#callbacks","text":"Callbacks are for the more experienced creator because the return value can be based on many conditions depending on what you want to achieve. For example, you can use callbacks to determine if an NPC should display certain choices to the player. Maybe you have an NPC that sells special weapons, but you only want to list weapons that are for that players level. This is where callbacks become really useful and make the dialogues appear more dynamic. To use the callback system, you need to require the Dialogue_System into your script by dropping it on as a custom property. 1 local Dialogue_System = require(script:GetCustomProperty(\"Dialogue_System\")) The next part is to hook up your callback so the system knows about it. It's important to make sure that the callback name matches the value in the condition of the conversation entry / choice. So for example if the player choice condition for an item an NPC sells would be function=can_show_epic_sword . 1 2 3 4 5 6 7 Dialogue_System . register_callback ( \"can_show_epic_sword\" , function () if ( local_player : GetResource ( \"level\" ) >= 10 ) then return true end return false end ) In the example above, we return true if the players level is greater than or equal to 10, if it is, then the NPC will display the player choice allowing them to purchase the Epic Sword. If for some reason you need to remove a callback, then you can unregister it like so... 1 Dialogue_System . unregister_callback ( \"can_show_epic_sword\" ) Tip Take a look at the NPC Nya in the Advanced Example to show you how it can be used to display a different dialogue entry every time the player comes back to speak to them.","title":"Callbacks"},{"location":"conditions/","text":"Conditions Conditions allow for you to do various checks and call callback functions to determine if the entry or player choice should appear. This is very useful for beginners as they don't need to write code to handle checking of certain types. However, the system does support an advanced feature called function conditions for the more experienced creator. Note You can use up to 2 types in a condition. resource=coin;>=100,resource=shop_pass;==1 Resource This condition type allows you to check specific resources to see if the player has a certain amount. For example, if your NPC has an item they sell, but you only want this to show up if the player has 100 Gold, then we can write a resource condition like this. resource=gold;>=100 This tells the system that we want to check the Gold resource, and to see if the value is greater than or equal to the amount the player has. Here are the condition checkers that the system supports. Operator Description == If the resource is equal to the value return true. Example: resource=gold;==500 . If the Gold resource is equal to 500 return true. >= If the resource is greater than or equal to the value return true. Example: resource=gold;>=1 . If the gold resource is >= than or equal to 1 then return true. This is a way to check if a player has this resource. <= If the resource is less than or equal to the value return true. Example: resource=gold;<=50 Function This condition is the callback function used for this entry / choice. This is a more advanced feature that will require some Lua knowledge, as you will need to register a callback that returns either true or false . function=check_something Name This condition type can be used if you want to check the players name is a match. For example if you only want to show a dialogue / choice to a specific player, then you can set the condition like so. name=CommanderFoo If the player name matches the condition, then the dialogue entry / choice will show. ID This condition type can be used if you want to check the players ID is a match. For example if you only want to show a dialogue / choice for a specific player ID, then you can set the condition like so. id=d8sddjhdsa8dsadhsady8saff If the player ID matches the condition, then the dialogue entry / choice will show. Played This condition type can be used if you want to check the played attribute of an entry. For example if you only want a dialogue entry to appear once, then you can check to see if it has been played. played=true or played=false","title":"Conditions"},{"location":"conditions/#conditions","text":"Conditions allow for you to do various checks and call callback functions to determine if the entry or player choice should appear. This is very useful for beginners as they don't need to write code to handle checking of certain types. However, the system does support an advanced feature called function conditions for the more experienced creator. Note You can use up to 2 types in a condition. resource=coin;>=100,resource=shop_pass;==1","title":"Conditions"},{"location":"conditions/#resource","text":"This condition type allows you to check specific resources to see if the player has a certain amount. For example, if your NPC has an item they sell, but you only want this to show up if the player has 100 Gold, then we can write a resource condition like this. resource=gold;>=100 This tells the system that we want to check the Gold resource, and to see if the value is greater than or equal to the amount the player has. Here are the condition checkers that the system supports. Operator Description == If the resource is equal to the value return true. Example: resource=gold;==500 . If the Gold resource is equal to 500 return true. >= If the resource is greater than or equal to the value return true. Example: resource=gold;>=1 . If the gold resource is >= than or equal to 1 then return true. This is a way to check if a player has this resource. <= If the resource is less than or equal to the value return true. Example: resource=gold;<=50","title":"Resource"},{"location":"conditions/#function","text":"This condition is the callback function used for this entry / choice. This is a more advanced feature that will require some Lua knowledge, as you will need to register a callback that returns either true or false . function=check_something","title":"Function"},{"location":"conditions/#name","text":"This condition type can be used if you want to check the players name is a match. For example if you only want to show a dialogue / choice to a specific player, then you can set the condition like so. name=CommanderFoo If the player name matches the condition, then the dialogue entry / choice will show.","title":"Name"},{"location":"conditions/#id","text":"This condition type can be used if you want to check the players ID is a match. For example if you only want to show a dialogue / choice for a specific player ID, then you can set the condition like so. id=d8sddjhdsa8dsadhsady8saff If the player ID matches the condition, then the dialogue entry / choice will show.","title":"ID"},{"location":"conditions/#played","text":"This condition type can be used if you want to check the played attribute of an entry. For example if you only want a dialogue entry to appear once, then you can check to see if it has been played. played=true or played=false","title":"Played"},{"location":"credits/","text":"Credits The follow assets were used in the Advanced Example . Artist: NyaAlchemi Name: [Alchemi] 5 Market Stalls Links: Core , Twitter , Twitch","title":"Credits"},{"location":"credits/#credits","text":"The follow assets were used in the Advanced Example . Artist: NyaAlchemi Name: [Alchemi] 5 Market Stalls Links: Core , Twitter , Twitch","title":"Credits"},{"location":"how/","text":"How it Works The Dialogue System works on a hierarchy structure system. The reason for this is so that it was far more friendly to work with, more easy to visualise the structure of a conversation for a character, and quicker iteration to customise / edit the dialogue. You can setup a conversation with a character and player in a few mins. There is no need to edit Lua files, or write out dialogue branches in code, or have lots of properties with dialogue that is hard to visualise. The key things to take away from this is there are 3 data container scripts that you will be dropping into the hierarchy. Dialogue_Conversation This data container script is the entry point for a character. It's a good habit to rename this script to the name of the character the dialogue will be for. You only need one of these per character. Dialogue_Conversation_Entry This data container script is the entry for the character. Meaning, this is what the character will say to the player. You can nest these and also have branching dialogue in no time at all. Dialogue_Player_Choice data containers can also become childs of this container. Dialogue_Player_Choice This data container script is the player choice that will appear in the dialogue for the player to pick. These can also be nested and become childs of Dialogue_Conversation_Entry . The Dialogue System at runtime will traverse the data containers and build up a tree. While doing so the system will look at any callbacks and conditions setup for each item in the tree.","title":"How it Works"},{"location":"how/#how-it-works","text":"The Dialogue System works on a hierarchy structure system. The reason for this is so that it was far more friendly to work with, more easy to visualise the structure of a conversation for a character, and quicker iteration to customise / edit the dialogue. You can setup a conversation with a character and player in a few mins. There is no need to edit Lua files, or write out dialogue branches in code, or have lots of properties with dialogue that is hard to visualise. The key things to take away from this is there are 3 data container scripts that you will be dropping into the hierarchy. Dialogue_Conversation This data container script is the entry point for a character. It's a good habit to rename this script to the name of the character the dialogue will be for. You only need one of these per character. Dialogue_Conversation_Entry This data container script is the entry for the character. Meaning, this is what the character will say to the player. You can nest these and also have branching dialogue in no time at all. Dialogue_Player_Choice data containers can also become childs of this container. Dialogue_Player_Choice This data container script is the player choice that will appear in the dialogue for the player to pick. These can also be nested and become childs of Dialogue_Conversation_Entry . The Dialogue System at runtime will traverse the data containers and build up a tree. While doing so the system will look at any callbacks and conditions setup for each item in the tree.","title":"How it Works"},{"location":"quick-start/","text":"Quick Start If you just want to get right in with a high level overview of how to use this system, then follow the steps below. Otherwise I would take the time to read some of the other pages of the documentation and definitely try out the examples that come with the system to see how it works and how those were setup. Drag the template Dialogue System into the hierarchy. Under your NPC characters as the first child, drag the template Dialogue Trigger into the hierarchy and setup the trigger volume size / position. Create a Client Context folder which will become the database for the dialogue system. Drag the script Dialogue_Conversation into the database folder and setup the properties. Drag the script Dialogue_Conversation_Entry as a child of the Dialogue_Conversation script. Repeat for branches and sub branches. For player choices, drag the Dialogue_Player_Choice script as child of either existing choice scripts or entry scripts. Drag the database folder onto the property of the Dialogue System folder. Tip For proper understanding of the hierarchy when creating dialogue branches and choices, I would suggest reading the documentation to understand it more, or checkout the examples that come with the system to see how they are setup. Below is an example structure of the NPC Tobs in the advanced example. Note The script Dialogue_Conversation is renamed in the exampe to the NPC name. This makes it much easier when you have a lot of conversations setup for different characters.","title":"Quick Start"},{"location":"quick-start/#quick-start","text":"If you just want to get right in with a high level overview of how to use this system, then follow the steps below. Otherwise I would take the time to read some of the other pages of the documentation and definitely try out the examples that come with the system to see how it works and how those were setup. Drag the template Dialogue System into the hierarchy. Under your NPC characters as the first child, drag the template Dialogue Trigger into the hierarchy and setup the trigger volume size / position. Create a Client Context folder which will become the database for the dialogue system. Drag the script Dialogue_Conversation into the database folder and setup the properties. Drag the script Dialogue_Conversation_Entry as a child of the Dialogue_Conversation script. Repeat for branches and sub branches. For player choices, drag the Dialogue_Player_Choice script as child of either existing choice scripts or entry scripts. Drag the database folder onto the property of the Dialogue System folder. Tip For proper understanding of the hierarchy when creating dialogue branches and choices, I would suggest reading the documentation to understand it more, or checkout the examples that come with the system to see how they are setup. Below is an example structure of the NPC Tobs in the advanced example. Note The script Dialogue_Conversation is renamed in the exampe to the NPC name. This makes it much easier when you have a lot of conversations setup for different characters.","title":"Quick Start"},{"location":"replacements/","text":"Replacements Info If you have a replacement variable idea that you would like to see added, let me know. The following list of replacements can be used for dialogue text and player choice text. Type Description {name} This will be replaced by the name of the player. {id} This will be replaced by the ID of the player. {hitpoints} This will be replaced with the current hit points (aka health) of the player. {maxhitpoints} This will be replaced with the max hit points (aka max halth) of the player. {kills} This will be replaced with the total kills the player has got. {deaths} This will be replaced with the total deaths the player has got. {maxjumpcount} This will be replaced with the max jump count the player can do. {resource=RESOURCE} This will be replaced with the resource amount. See the Resource section below for more information. Resources Resource replacement variables support a few additional parameters to handle displaying it to the player so it reads correct. How many games do you see that don't handle the plural of something like \"Potions\", or \"Coins\". Reading \"You have 12 Potion\" is not a hard problem to solve but is often overlooked. So the resource replacement variable will handle this for you. resource=potion,true,true The 2 parameters after the type and value resource=potion tells the system to include the resource name, and handle the plural for you.","title":"Replacements"},{"location":"replacements/#replacements","text":"Info If you have a replacement variable idea that you would like to see added, let me know. The following list of replacements can be used for dialogue text and player choice text. Type Description {name} This will be replaced by the name of the player. {id} This will be replaced by the ID of the player. {hitpoints} This will be replaced with the current hit points (aka health) of the player. {maxhitpoints} This will be replaced with the max hit points (aka max halth) of the player. {kills} This will be replaced with the total kills the player has got. {deaths} This will be replaced with the total deaths the player has got. {maxjumpcount} This will be replaced with the max jump count the player can do. {resource=RESOURCE} This will be replaced with the resource amount. See the Resource section below for more information.","title":"Replacements"},{"location":"replacements/#resources","text":"Resource replacement variables support a few additional parameters to handle displaying it to the player so it reads correct. How many games do you see that don't handle the plural of something like \"Potions\", or \"Coins\". Reading \"You have 12 Potion\" is not a hard problem to solve but is often overlooked. So the resource replacement variable will handle this for you. resource=potion,true,true The 2 parameters after the type and value resource=potion tells the system to include the resource name, and handle the plural for you.","title":"Resources"},{"location":"themes/","text":"Themes All themes require certain elements. Each theme has properties on the root object which are. Property Name Description name The UIText object that will be used to display the NPC / \"You\" name. text The UIText object that will be used to display the NPC text to the player. choices_panel The UIPanel object that will be the container for the choices. close_button The UIButton object that will be used to close the dialogue. next_button The UIButton object that will be used to go to the next entry in the conversation. Below are the themes that come with the system. These can be used as a base to work from for creating a unique dialogue for your own game. The Basic Theme is the most basic version that is a good starting point if you want to design your own. Bubbly Theme Simple Theme Corehaven Theme Persona Theme Basic Theme","title":"Themes"},{"location":"themes/#themes","text":"All themes require certain elements. Each theme has properties on the root object which are. Property Name Description name The UIText object that will be used to display the NPC / \"You\" name. text The UIText object that will be used to display the NPC text to the player. choices_panel The UIPanel object that will be the container for the choices. close_button The UIButton object that will be used to close the dialogue. next_button The UIButton object that will be used to go to the next entry in the conversation. Below are the themes that come with the system. These can be used as a base to work from for creating a unique dialogue for your own game. The Basic Theme is the most basic version that is a good starting point if you want to design your own. Bubbly Theme Simple Theme Corehaven Theme Persona Theme Basic Theme","title":"Themes"},{"location":"properties/dialogue-conversation-entry/","text":"Dialogue Conversation Entry Here are all the properties for the Dialogue_Conversation_Entry script. Property Name Description id The ID for this conversation. This must be unique. text The text to display in the dialogue. condition Any conditions for this entry. See Conditions section. call_event The event to call when this entry becomes active. width_override Override the width of the dialogue just for this entry. height_override Override the height of the dialogue just for this entry. random If enabled, then it will pick a random entry and respect condtions.","title":"Dialogue Conversation Entry"},{"location":"properties/dialogue-conversation-entry/#dialogue-conversation-entry","text":"Here are all the properties for the Dialogue_Conversation_Entry script. Property Name Description id The ID for this conversation. This must be unique. text The text to display in the dialogue. condition Any conditions for this entry. See Conditions section. call_event The event to call when this entry becomes active. width_override Override the width of the dialogue just for this entry. height_override Override the height of the dialogue just for this entry. random If enabled, then it will pick a random entry and respect condtions.","title":"Dialogue Conversation Entry"},{"location":"properties/dialogue-conversation/","text":"Dialogue Conversation Below are all the properties that are on the Dialogue_Conversation script. Property Name Description id The ID for this conversation. This must be unique. name The name of the character. This will show up in the speaker element. dialogue_trigger The dialogue trigger for this character. It's important that the dialogue trigger is a child of the character as the system will look at the parent element and attach the indicator to it. repeat_dialogue Turn off if you do not want the character to repeat their dialogue. disable_player_look Disables the player look when the dialogue is active. disable_player_movement Disables the player movement when the dialogue is active. disable_player_mount Disables the player mount while the dialogue is active. disable_player_crouch Disables the player crouch while the dialogue is active. disable_player_jump Disables the player jump while the dialogue is active. enable_ui_interact If enabled, the player can interact with UI elements. enable_ui_cursor If enabled, the player will be able to see and use their cursor. hide_reticle If enabled, then the reticle will be hidden while the dialogue is active. call_event The event to call when this conversation becomes active. show_indicator If enabled, then an indicator above the characters head will show to the player as a visual way to let them know they can interact with this character. indicator_offset The offset of the indicator. indicator_template The indicator template to use for this character. random If enabled, then it will pick a random entry while respecting conditions.","title":"Dialogue Conversation"},{"location":"properties/dialogue-conversation/#dialogue-conversation","text":"Below are all the properties that are on the Dialogue_Conversation script. Property Name Description id The ID for this conversation. This must be unique. name The name of the character. This will show up in the speaker element. dialogue_trigger The dialogue trigger for this character. It's important that the dialogue trigger is a child of the character as the system will look at the parent element and attach the indicator to it. repeat_dialogue Turn off if you do not want the character to repeat their dialogue. disable_player_look Disables the player look when the dialogue is active. disable_player_movement Disables the player movement when the dialogue is active. disable_player_mount Disables the player mount while the dialogue is active. disable_player_crouch Disables the player crouch while the dialogue is active. disable_player_jump Disables the player jump while the dialogue is active. enable_ui_interact If enabled, the player can interact with UI elements. enable_ui_cursor If enabled, the player will be able to see and use their cursor. hide_reticle If enabled, then the reticle will be hidden while the dialogue is active. call_event The event to call when this conversation becomes active. show_indicator If enabled, then an indicator above the characters head will show to the player as a visual way to let them know they can interact with this character. indicator_offset The offset of the indicator. indicator_template The indicator template to use for this character. random If enabled, then it will pick a random entry while respecting conditions.","title":"Dialogue Conversation"},{"location":"properties/dialogue-player-choice/","text":"Dialogue Player Choice Here are all the properties for the Dialogue_Player_Choice script. Property Name Description id The ID for this conversation. This must be unique. text The text to display in the dialogue. condition Any conditions for this choice. See Conditions section. call_event The event to call when this choice becomes active. width_override Override width of the dialogue for this entry. Only applies from 1 choice entry. So overriding the width on the first choice is all that needs to be done if you have multiple choices. height_override Override the height of the dialogue just for this entry.","title":"Dialogue Player Choice"},{"location":"properties/dialogue-player-choice/#dialogue-player-choice","text":"Here are all the properties for the Dialogue_Player_Choice script. Property Name Description id The ID for this conversation. This must be unique. text The text to display in the dialogue. condition Any conditions for this choice. See Conditions section. call_event The event to call when this choice becomes active. width_override Override width of the dialogue for this entry. Only applies from 1 choice entry. So overriding the width on the first choice is all that needs to be done if you have multiple choices. height_override Override the height of the dialogue just for this entry.","title":"Dialogue Player Choice"},{"location":"properties/dialogue-system/","text":"Dialogue System Below are all the properties that are on the Dialogue System template. Property Name Description database The database of conversations to use. show_warnings If enabled, then any issue with the system will be displayed in the Event Log. pulse_next_close_buttons If enabled, then \"Next\" and \"Exit\" buttons will pulse to be more visible to the player. animate_letters If enabled, then the letters of the text will animate in like a typing effect. letter_speed The speed of the animation effect. dialogue_template The dialogue template to use. This can be changed at runtime. choice_template The template to use when displaying choices to the player. This can be changed at runtime. click_sound The sound to use when the player clicks on the dialogue and buttons. type_sound The sound to use for the typing effect. play_click_sound If enabled, the click sound will be played. play_type_sound If enabled, the type sound will be played. min_speaker_width The min width of the speaker element that shows the name of the NPC / You. This is dynamically set for each entry.","title":"Dialogue System"},{"location":"properties/dialogue-system/#dialogue-system","text":"Below are all the properties that are on the Dialogue System template. Property Name Description database The database of conversations to use. show_warnings If enabled, then any issue with the system will be displayed in the Event Log. pulse_next_close_buttons If enabled, then \"Next\" and \"Exit\" buttons will pulse to be more visible to the player. animate_letters If enabled, then the letters of the text will animate in like a typing effect. letter_speed The speed of the animation effect. dialogue_template The dialogue template to use. This can be changed at runtime. choice_template The template to use when displaying choices to the player. This can be changed at runtime. click_sound The sound to use when the player clicks on the dialogue and buttons. type_sound The sound to use for the typing effect. play_click_sound If enabled, the click sound will be played. play_type_sound If enabled, the type sound will be played. min_speaker_width The min width of the speaker element that shows the name of the NPC / You. This is dynamically set for each entry.","title":"Dialogue System"},{"location":"tutorial/call-events/","text":"9. Call Events Call events are a way for you to hook into the system to a specific conversation, conversation entry, or player choice so that you can do something when it is the current active item in the dialogue tree. A use for call events would be to connect other parts of your code up so that you can perform some action based on which part of the dialogue is active. So as an example, let's say you are talking to a guard standing next to a closed gate, when you trigger the conversation you want the gate to open. The call_event property will be executed so that you can hook up your code to open the gate for the player. In the example below, we will setup a call event for the conversation, the conversation entry, and one player choice. All we will do is write out some text to the Event Log to show what was active. Note A conversation call_event will be active the same time as the first conversation entry picked as they run at the same time. 1 2 3 4 5 6 7 8 9 10 11 Events . Connect ( \"conversation_called\" , function ( conversation ) print ( conversation : get_name ()) end ) Events . Connect ( \"greeted\" , function ( entry ) print ( entry : get_text ()) end ) Events . Connect ( \"cookies\" , function ( choice ) print ( choice : get_text ()) end )","title":"9. Call Events"},{"location":"tutorial/call-events/#9-call-events","text":"Call events are a way for you to hook into the system to a specific conversation, conversation entry, or player choice so that you can do something when it is the current active item in the dialogue tree. A use for call events would be to connect other parts of your code up so that you can perform some action based on which part of the dialogue is active. So as an example, let's say you are talking to a guard standing next to a closed gate, when you trigger the conversation you want the gate to open. The call_event property will be executed so that you can hook up your code to open the gate for the player. In the example below, we will setup a call event for the conversation, the conversation entry, and one player choice. All we will do is write out some text to the Event Log to show what was active. Note A conversation call_event will be active the same time as the first conversation entry picked as they run at the same time. 1 2 3 4 5 6 7 8 9 10 11 Events . Connect ( \"conversation_called\" , function ( conversation ) print ( conversation : get_name ()) end ) Events . Connect ( \"greeted\" , function ( entry ) print ( entry : get_text ()) end ) Events . Connect ( \"cookies\" , function ( choice ) print ( choice : get_text ()) end )","title":"9. Call Events"},{"location":"tutorial/condition-functions/","text":"11. Condition Functions Condition functions are callbacks for the system to look at to see if an entry or choice can be used / appear. These can be quite powerful and add a lot more depth to the conversation between an NPC and the player. As an example, we could use a callback to check if the NPC has an item in stock. If the item is in stock, then we display the dialogue entry, otherwise the system will look for the next entry to display instead. In the video below, we will change the behaviour of the NPC so that if the NPC has a special item in stock, the choice for the player to purchase it will show up, otherwise it will not. Warn To be able to use the callback system, we need to require the Dialogue_System API so we can register a callback. The video below shows you how to do this by dropping the Dialogue_System script as a custom property onto the Example script. The return back of the callback determins if the choice should show or not. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -- Require Dialogue_System local Dialogue_System = require ( script : GetCustomProperty ( \"Dialogue_System\" )) -- Call events Events . Connect ( \"conversation_called\" , function ( conversation ) print ( conversation : get_name ()) end ) Events . Connect ( \"greeted\" , function ( entry ) print ( entry : get_text ()) end ) Events . Connect ( \"cookies\" , function ( choice ) print ( choice : get_text ()) end ) -- Callback functions -- Return false to hide the choice -- Return true to show the choice Dialogue_System . register_callback ( \"has_special_item\" , function () return true end )","title":"11.  Condition Functions"},{"location":"tutorial/condition-functions/#11-condition-functions","text":"Condition functions are callbacks for the system to look at to see if an entry or choice can be used / appear. These can be quite powerful and add a lot more depth to the conversation between an NPC and the player. As an example, we could use a callback to check if the NPC has an item in stock. If the item is in stock, then we display the dialogue entry, otherwise the system will look for the next entry to display instead. In the video below, we will change the behaviour of the NPC so that if the NPC has a special item in stock, the choice for the player to purchase it will show up, otherwise it will not. Warn To be able to use the callback system, we need to require the Dialogue_System API so we can register a callback. The video below shows you how to do this by dropping the Dialogue_System script as a custom property onto the Example script. The return back of the callback determins if the choice should show or not. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -- Require Dialogue_System local Dialogue_System = require ( script : GetCustomProperty ( \"Dialogue_System\" )) -- Call events Events . Connect ( \"conversation_called\" , function ( conversation ) print ( conversation : get_name ()) end ) Events . Connect ( \"greeted\" , function ( entry ) print ( entry : get_text ()) end ) Events . Connect ( \"cookies\" , function ( choice ) print ( choice : get_text ()) end ) -- Callback functions -- Return false to hide the choice -- Return true to show the choice Dialogue_System . register_callback ( \"has_special_item\" , function () return true end )","title":"11.  Condition Functions"},{"location":"tutorial/conditions/","text":"10. Conditions Conditions provide you with an inline way of performing a condition check for the entry or choice. For example, if you didn't want a choice to show up to the player if they already had some cookies, we can do a resource check and hide the choice from the player. Conditions can be used to check a few different things and can really add a little more depth to the dialogues for players. In the video below we will setup a resource check condition so when the player asks if the NPC has any cookies, the NPC will either respond with a message telling the player they already have some, or a message to tell the player they don't have any left to sell. In the video there are 2 things to note. A replacement variable being used. {resource=cookie,true,true} This is a replacement variable that will show the amount of cookies the play has in the dialogue text. The 2 true parameters are to handle 2 things automatically for us. Write out the name of the resource. Handle the plural for us so that cases such as \"You have 1 Cookie\" and \"You have 100 Cookies\" where \"s\" is added automatically so it reads better for the player. Condition Syntax. resource=cookie;>=1 This is the condition part. What we are doing here is telling the system to look at the resource cookie and return true if the the player has greater than or equal to 1 cookie. The system will look at this condition, and if is true, then the conversation entry will be displayed instead of the other one. This is an easy no code solution and allows quick iteration of your dialogue entries without needing to write any Lua code. Server Script 1 2 3 Game . playerJoinedEvent : Connect ( function ( player ) player : SetResource ( \"cookie\" , 0 ) -- Set the cookie amount when the player joins end )","title":"10.  Conditions"},{"location":"tutorial/conditions/#10-conditions","text":"Conditions provide you with an inline way of performing a condition check for the entry or choice. For example, if you didn't want a choice to show up to the player if they already had some cookies, we can do a resource check and hide the choice from the player. Conditions can be used to check a few different things and can really add a little more depth to the dialogues for players. In the video below we will setup a resource check condition so when the player asks if the NPC has any cookies, the NPC will either respond with a message telling the player they already have some, or a message to tell the player they don't have any left to sell. In the video there are 2 things to note. A replacement variable being used. {resource=cookie,true,true} This is a replacement variable that will show the amount of cookies the play has in the dialogue text. The 2 true parameters are to handle 2 things automatically for us. Write out the name of the resource. Handle the plural for us so that cases such as \"You have 1 Cookie\" and \"You have 100 Cookies\" where \"s\" is added automatically so it reads better for the player. Condition Syntax. resource=cookie;>=1 This is the condition part. What we are doing here is telling the system to look at the resource cookie and return true if the the player has greater than or equal to 1 cookie. The system will look at this condition, and if is true, then the conversation entry will be displayed instead of the other one. This is an easy no code solution and allows quick iteration of your dialogue entries without needing to write any Lua code. Server Script 1 2 3 Game . playerJoinedEvent : Connect ( function ( player ) player : SetResource ( \"cookie\" , 0 ) -- Set the cookie amount when the player joins end )","title":"10.  Conditions"},{"location":"tutorial/conversation-choices/","text":"7. Conversation Choices For our next dialogue with our NPC, we will add 2 player choices. Do you have any Cookies? This choice will also have a Dialogue_Conversation_Entry as a child so that the NPC can respond to the players choice. Goodbye. This choice will end the conversation. Here's a look at the hierarchy structure.","title":"7. Conversation Choices"},{"location":"tutorial/conversation-choices/#7-conversation-choices","text":"For our next dialogue with our NPC, we will add 2 player choices. Do you have any Cookies? This choice will also have a Dialogue_Conversation_Entry as a child so that the NPC can respond to the players choice. Goodbye. This choice will end the conversation. Here's a look at the hierarchy structure.","title":"7. Conversation Choices"},{"location":"tutorial/conversation-entry/","text":"6. Conversation Entry Next we are going to create our first entry that the NPC will say to us. We do this by dragging Dialogue_Conversation_Entry as a child of the Dialogue_Conversation script. We then set the id and text properties. Doing this will give our first entry for the NPC to say to us. After that is setup, enter play mode and you should be able to interact with the NPC and their dialogue will appear. Tip You can add Dialogue_Conversation_Entry as a child of the last entry you added. This will then show 2 dialogues from the NPC.","title":"6. Conversation Entry"},{"location":"tutorial/conversation-entry/#6-conversation-entry","text":"Next we are going to create our first entry that the NPC will say to us. We do this by dragging Dialogue_Conversation_Entry as a child of the Dialogue_Conversation script. We then set the id and text properties. Doing this will give our first entry for the NPC to say to us. After that is setup, enter play mode and you should be able to interact with the NPC and their dialogue will appear. Tip You can add Dialogue_Conversation_Entry as a child of the last entry you added. This will then show 2 dialogues from the NPC.","title":"6. Conversation Entry"},{"location":"tutorial/create-npc/","text":"2. Create NPC In this tutorial we are going to create a Non-Player Character (NPC) that eventually we will be able to walk up to and have a conversation with. Grab a character or whatever object you want the player to talk too, and drop it into the hierarchy. Tip I would recommend naming your character and also placing it into a folder called NPCs .","title":"2. Create NPC"},{"location":"tutorial/create-npc/#2-create-npc","text":"In this tutorial we are going to create a Non-Player Character (NPC) that eventually we will be able to walk up to and have a conversation with. Grab a character or whatever object you want the player to talk too, and drop it into the hierarchy. Tip I would recommend naming your character and also placing it into a folder called NPCs .","title":"2. Create NPC"},{"location":"tutorial/database-folder/","text":"3. Database Folder Next we need to create the database folder that will hold the converastions for all NPCs. Create a new Client Context folder and call it Dialogue Database , and then drag and drop this folder onto the database property on the Dialogue System folder. Doing this will tell the system at runtime what database to look at.","title":"3. Database Folder"},{"location":"tutorial/database-folder/#3-database-folder","text":"Next we need to create the database folder that will hold the converastions for all NPCs. Create a new Client Context folder and call it Dialogue Database , and then drag and drop this folder onto the database property on the Dialogue System folder. Doing this will tell the system at runtime what database to look at.","title":"3. Database Folder"},{"location":"tutorial/npc-conversation/","text":"4. NPC Conversation Next we are going to drag the Dialogue_Conversation script into the database folder and setup some properties. This script is the entry point for our new NPC. Each NPC you create needs one of these scripts which acts as a data container. We will set the id and name properties. Warn The id for each Dialogue_Conversation script needs to be unique.","title":"4. NPC Conversation"},{"location":"tutorial/npc-conversation/#4-npc-conversation","text":"Next we are going to drag the Dialogue_Conversation script into the database folder and setup some properties. This script is the entry point for our new NPC. Each NPC you create needs one of these scripts which acts as a data container. We will set the id and name properties. Warn The id for each Dialogue_Conversation script needs to be unique.","title":"4. NPC Conversation"},{"location":"tutorial/npc-trigger/","text":"5. NPC Trigger We need to add a trigger to the NPC so that we can interact with it. The Dialogue System comes with a template called Dialogue Trigger that has specific properties on it that the system looks at. It's very important that this trigger is a direct child of the NPC, otherwise some aspects of the system may not work correctly. After the trigger has been added to the NPC, modify the position, size, and interaction label. Then drag the the Dialogue Trigger folder onto the dialogue_trigger property of the Dialogue_Conversation in the database folder. Tip Rename Dialogue_Conversation to the name of your NPC so it's easier to keep track of which conversations are for which NPCs.","title":"5. NPC Trigger"},{"location":"tutorial/npc-trigger/#5-npc-trigger","text":"We need to add a trigger to the NPC so that we can interact with it. The Dialogue System comes with a template called Dialogue Trigger that has specific properties on it that the system looks at. It's very important that this trigger is a direct child of the NPC, otherwise some aspects of the system may not work correctly. After the trigger has been added to the NPC, modify the position, size, and interaction label. Then drag the the Dialogue Trigger folder onto the dialogue_trigger property of the Dialogue_Conversation in the database folder. Tip Rename Dialogue_Conversation to the name of your NPC so it's easier to keep track of which conversations are for which NPCs.","title":"5. NPC Trigger"},{"location":"tutorial/replacements/","text":"8. Replacements Replacements are a way of providing you variables that you can place into your text for NPCs and choices, then at runtime the system will replace those variables. For example, if you want your NPC to greet the player by saying \"Hello CommanderFoo\", we can use a name variable like so. 1 Hello {name}. So let's change the first Conversation_Entry to include the name of the player when being greeted, and also the Conversation_Entry for when the player asks for cookies to also include some information about the players health by using {hitpoints} .","title":"8. Replacements"},{"location":"tutorial/replacements/#8-replacements","text":"Replacements are a way of providing you variables that you can place into your text for NPCs and choices, then at runtime the system will replace those variables. For example, if you want your NPC to greet the player by saying \"Hello CommanderFoo\", we can use a name variable like so. 1 Hello {name}. So let's change the first Conversation_Entry to include the name of the player when being greeted, and also the Conversation_Entry for when the player asks for cookies to also include some information about the players health by using {hitpoints} .","title":"8. Replacements"},{"location":"tutorial/setup/","text":"1. Setup First important thing you need to do is import the Dialogue System from Community Content and then drag the Dialogue System template into your hierarchy. That's it. The Dialogue System just needs a database of conversations which we will setup soon. Tip The Dialogue System in the hierarchy will probably show up red. Don't worry about this for now, it means there is a property that is missing a reference. We will fix this issue in a later tutorial when we have created our database.","title":"1. Setup"},{"location":"tutorial/setup/#1-setup","text":"First important thing you need to do is import the Dialogue System from Community Content and then drag the Dialogue System template into your hierarchy. That's it. The Dialogue System just needs a database of conversations which we will setup soon. Tip The Dialogue System in the hierarchy will probably show up red. Don't worry about this for now, it means there is a property that is missing a reference. We will fix this issue in a later tutorial when we have created our database.","title":"1. Setup"}]}